definitions:
  domain.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      role:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      uuid:
        type: string
    type: object
  domain.Wallet:
    properties:
      balanceInCents:
        type: integer
      createdAt:
        type: string
      currency:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      uuid:
        type: string
    type: object
  dto.AddCardRequest:
    description: 'AddCardRequest validates input for adding a new card. CardNumber
      must be a valid credit card number between 13 and 19 digits. Provider must be
      one of: visa, mastercard, or amex. Type must be either credit or debit. ExpiryDate
      must be a future date and "MM/YY" format. CVV must be minimum 3 and max 4 four
      digits.'
    properties:
      cardNumber:
        maxLength: 19
        minLength: 13
        type: string
      cvv:
        maxLength: 4
        minLength: 3
        type: string
      expiryDate:
        type: string
      provider:
        enum:
        - visa
        - mastercard
        - amex
        type: string
      type:
        enum:
        - credit
        - debit
        type: string
    required:
    - cardNumber
    - cvv
    - expiryDate
    - provider
    - type
    type: object
  dto.AddCardResponse:
    description: AddCardResponse includes the created card's details.
    properties:
      card:
        $ref: '#/definitions/dto.CardResponse'
    type: object
  dto.CardListResponse:
    description: CardListResponse includes a list of cards.
    properties:
      cards:
        items:
          $ref: '#/definitions/dto.CardResponse'
        type: array
    type: object
  dto.CardResponse:
    description: CardResponse includes the card's details, excluding sensitive information.
    properties:
      createdAt:
        type: string
      expiryDate:
        type: string
      lastFour:
        type: string
      provider:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      uuid:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      fullName:
        maxLength: 255
        minLength: 3
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - user
        - agent
        - merchant
        type: string
    required:
    - email
    - fullName
    - password
    - role
    type: object
  dto.CreateUserResponse:
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  dto.CreateWalletRequest:
    properties:
      currency:
        enum:
        - USD
        type: string
    required:
    - currency
    type: object
  dto.CreateWalletResponse:
    properties:
      wallet:
        $ref: '#/definitions/domain.Wallet'
    type: object
  dto.ErrorResponse:
    description: ErrorResponse provides a consistent error format.
    properties:
      error:
        type: string
    type: object
  dto.GetWalletBalanceResponse:
    properties:
      balanceInCents:
        type: integer
      currency:
        type: string
    type: object
  dto.LoginRequest:
    description: LoginRequest validates input for user login. Email must be a valid
      email address. Password is required.
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    description: LoginResponse includes the authenticated user's details.
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  dto.RegisterUserRequest:
    description: RegisterUserRequest validates input for user registration. FullName
      must be at least 3 and at max 255 characters long. Email must be a valid email
      address. Password must be at least 8 and at max 64 characters long.
    properties:
      email:
        type: string
      fullName:
        maxLength: 255
        minLength: 3
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - fullName
    - password
    type: object
  dto.RegisterUserResponse:
    description: RegisterUserResponse includes the created user's details.
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  dto.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  dto.UpdateCardRequest:
    description: UpdateCardRequest validates input for updating a card. ExpiryDate,
      if provided, must be a future date. Status, if provided, must be either active
      or inactive.
    properties:
      expiryDate:
        type: string
      status:
        enum:
        - active
        - inactive
        type: string
    type: object
  dto.UpdateWalletStatusRequest:
    properties:
      status:
        enum:
        - active
        - inactive
        - blocked
        type: string
    required:
    - status
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Verifies password using bcrypt comparison.
        Generates new JWT access token using ECDSA encryption.
        Sets HTTP-only cookie with new access token and and X-Request-Id header.
      parameters:
      - description: User login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Authenticate a user and provide access tokens
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: |-
        Hashes password using bcrypt before storage.
        Generates JWT access token using ECDSA encryption.
        Sets HTTP-only cookie with access token and X-Request-Id header.
      parameters:
      - description: User registration details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user with admin, user, agent, or merchant role. Only
        admins can perform this action.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User creation details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new user with a specific role
      tags:
      - user
  /users/{user_uuid}/wallets:
    post:
      consumes:
      - application/json
      description: Creates a new wallet for the specified user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet creation details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateWalletRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateWalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new wallet for a user
      tags:
      - wallet
  /users/{user_uuid}/wallets/{wallet_uuid}/balance:
    get:
      description: Retrieves the balance of a specific wallet for a user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetWalletBalanceResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get wallet balance
      tags:
      - wallet
  /users/{user_uuid}/wallets/{wallet_uuid}/cards:
    get:
      description: Retrieves a list of cards for a specific wallet
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      - description: Filter by card provider
        in: query
        name: provider
        type: string
      - description: Filter by card status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CardListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List cards
      tags:
      - card
    post:
      consumes:
      - application/json
      description: Adds a new card to the specified wallet, encrypting sensitive data
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      - description: Card details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.AddCardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AddCardResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Add a new card to a wallet
      tags:
      - card
  /users/{user_uuid}/wallets/{wallet_uuid}/cards/{card_uuid}:
    delete:
      description: Soft deletes a specific card
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      - description: Card UUID
        in: path
        name: card_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a card
      tags:
      - card
    get:
      description: Retrieves details of a specific card
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      - description: Card UUID
        in: path
        name: card_uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get card details
      tags:
      - card
    patch:
      consumes:
      - application/json
      description: Updates the details of a specific card
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      - description: Card UUID
        in: path
        name: card_uuid
        required: true
        type: string
      - description: Updated card details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update card details
      tags:
      - card
  /users/{user_uuid}/wallets/{wallet_uuid}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of a specific wallet for a user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User UUID
        in: path
        name: user_uuid
        required: true
        type: string
      - description: Wallet UUID
        in: path
        name: wallet_uuid
        required: true
        type: string
      - description: New wallet status
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateWalletStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update wallet status
      tags:
      - wallet
swagger: "2.0"
